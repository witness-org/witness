variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"
  # https://reset.inso.tuwien.ac.at/repo/help/ci/runners/configure_runners.md#git-strategy
  GIT_STRATEGY: clone

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths:
    - .m2/repository

# Run Java unit and integration tests
test-server:
  image: maven:3.8-openjdk-15
  stage: test
  script:
    - 'cd server'
    - 'mvn $MAVEN_CLI_OPTS clean verify'

# Execute Flutter unit tests
test-client:
  image: cirrusci/flutter:2.5.0
  script:
    - 'cd client'
    - 'flutter doctor --verbose'
    - 'flutter pub get'
    - 'flutter clean'
    - 'flutter test --reporter expanded --coverage'
    - 'lcov --summary coverage/lcov.info > client-coverage.txt || true'
  artifacts:
    paths:
      - './client/client-coverage.txt'
      
# Execute Flutter integration tests
integration-test-client:
  image: raffaelfoidl/flutter-integration-test:chrome-v93-driver-v93
  script:
    - 'cd client'
    - '/app/chromedriver --whitelisted-ips --port=4444 &'
    - 'flutter doctor --verbose'
    - 'flutter pub get'
    - 'flutter clean'
    - 'flutter drive --driver=test_driver/integration_test.dart --target=integration_test/main_test.dart --release -d web-server'

# Execute maven checkstyle plugin
check-server:
  image: maven:3.8-openjdk-15
  stage: test
  script:
    - 'cd server'
    - 'mvn $MAVEN_CLI_OPTS checkstyle:check'

# Check codestyle, linting and static analysis of client code with dartfmt
check-client:
  image: cirrusci/flutter:2.5.0
  script:
    - 'cd client'

    # Applies code formatting to project using dartfmt. If this causes formatting changes, then exit with
    # code 1, making the job fail.
    - 'dart format ./ --line-length 150 --set-exit-if-changed'

    # The 'flutter analyze' may print parts of its output to stderr. Therefore, redirect stderr (2) to
    # stdout (1) and send it to a file. Finally, grep it for a positive outcome ("No issues found"). If this string
    # is not found (i.e. there are issues), grep exits with code 1, making the job fail. The " || true" part makes
    # that a potential non-zero exit code produced by the flutter analyze command does not make the job fail prematurely.
    - 'flutter analyze > analysisResult.txt 2>&1 || true'
    - 'cat analysisResult.txt'
    - 'grep "No issues found" analysisResult.txt'
