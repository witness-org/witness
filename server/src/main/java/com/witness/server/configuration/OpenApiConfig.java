package com.witness.server.configuration;

import io.swagger.v3.oas.models.Components;
import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.Operation;
import io.swagger.v3.oas.models.PathItem;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.security.SecurityScheme;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.function.Function;
import java.util.stream.Stream;
import org.springdoc.core.customizers.OpenApiCustomiser;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class OpenApiConfig {
  public static final String SECURITY_SCHEME_BEARER_TOKEN = "bearerAuth";
  public static final String SECURITY_SCHEME_NONE = "none";

  private static final List<Function<PathItem, Operation>> OPERATION_GETTERS = Arrays.asList(
      PathItem::getGet, PathItem::getPost, PathItem::getDelete, PathItem::getHead,
      PathItem::getOptions, PathItem::getPatch, PathItem::getPut);

  /**
   * <p>
   * Defines an OpenAPI 3.0 specification with general metadata and a security scheme for the REST API exposed by this application. The security
   * scheme defined by this bean makes that consumers of this metadata (e.g. Swagger UI) understand that it is secured using bearer authentication.
   * More specifically, the {@link io.swagger.v3.oas.annotations.security.SecurityRequirement} annotation with a reference to the scheme identified
   * by {@link OpenApiConfig#SECURITY_SCHEME_BEARER_TOKEN} on a REST controller leads to a padlock in the UI and an opportunity to provide a bearer
   * token such that requests sent via Swagger UI are properly authenticated.
   * </p>
   * <p>
   * Note that these metadata are purely for OpenAPI specification purposes and do not influence the actual security implementation
   * (request filters or the like).
   * </p>
   */
  @Bean
  public OpenAPI serverApi() {
    return new OpenAPI()
        .components(new Components())
        .info(new Info()
            .title("witness API")
            .version("v1")
            .description("API exposed by witness server application."))
        .schemaRequirement(SECURITY_SCHEME_BEARER_TOKEN,
            new SecurityScheme()
                .type(SecurityScheme.Type.HTTP)
                .bearerFormat("JWT")
                .scheme("bearer"));
  }

  /**
   * Customizes the {@link OpenAPI} object generated by springdoc in a way that overrides the globally defined bearer token security scheme specified
   * by {@link OpenApiConfig#serverApi()} and identified by {@link OpenApiConfig#SECURITY_SCHEME_BEARER_TOKEN} which, by default, applies to all
   * methods in a controller decorated with the corresponding {@link io.swagger.v3.oas.annotations.security.SecurityRequirement} annotation. If an
   * operation contains an additional reference to the security scheme identified by {@link OpenApiConfig#SECURITY_SCHEME_NONE}, this one overrides
   * the bearer scheme, clearing all {@link io.swagger.v3.oas.annotations.security.SecurityRequirement} definitions for this operation, defining it
   * to be accessible without any means of authentication. If an operation does not contain such a reference, it is kept untouched.
   *
   * @return a possibly modified version of the {@link OpenAPI} object populated by springdoc with removed security requirements operations that are
   *     decorated with the {@link OpenApiConfig#SECURITY_SCHEME_NONE} scheme.
   */
  @Bean
  public OpenApiCustomiser securityOverrideCustomizer() {
    return openApi -> openApi.getPaths().forEach((path, pathItem) ->
        getPublicOperations(pathItem).forEach(operation -> operation.setSecurity(Collections.emptyList()))
    );
  }

  private static Stream<Operation> getPublicOperations(PathItem pathItem) {
    return OPERATION_GETTERS.stream()
        .map(getter -> getter.apply(pathItem))
        .filter(OpenApiConfig::isPublicOperation);
  }

  private static boolean isPublicOperation(Operation operation) {
    if (operation == null) {
      return false;
    }

    var requirements = operation.getSecurity();
    return (requirements == null || requirements.stream().anyMatch(requirement -> requirement.containsKey(SECURITY_SCHEME_NONE)));
  }
}
