package com.witness.server.integration.web;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatCode;
import static org.assertj.core.api.Assumptions.assumeThat;

import java.io.FileOutputStream;
import java.io.OutputStreamWriter;
import java.nio.charset.StandardCharsets;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.test.context.ActiveProfiles;

/**
 * This class contains only a single test that is responsible for downloading the OpenAPI 3.0 specification of the REST API provided by this
 * application that is generated by springdoc (Swagger UI), both in JSON and in YAML format. The test intentionally slightly breaks the principle of
 * test isolation since it has the intended side effect of persisting the responses as physical files within the current working directory.
 */
@ActiveProfiles(profiles = {"integration-test", "api-generation"})
class ApiGenerationTest extends BaseControllerIntegrationTest {
  /**
   * This constant defines the file name (without extension) of the API specifications that are created by the
   * {@link ApiGenerationTest#downloadApiSpecification(String, String)} test. Changes to this constant also have to be propagated to places that
   * reference these files (e.g., .gitignore to not have them version-controlled or .gitlab-ci.yml for build artifact generation).
   */
  private static final String LOCAL_FILE_NAME = "server_api";

  @Value("${springdoc.api-docs.path}")
  private String apiDocsPath;

  @Value("${springdoc.api-docs.enabled}")
  private Boolean apiDocsEnabled;

  private String apiDocsEndpoint;

  @Override
  String getEndpointUrl() {
    return apiDocsEndpoint;
  }

  @ParameterizedTest
  @CsvSource(value = {"'',json", ".yaml,yaml"})
  void downloadApiSpecification(String endpointExtension, String fileExtension) {
    assumeThat(apiDocsEnabled)
        .describedAs("The Spring property \"springdoc.api-docs.enabled\" must be \"true\" in order for the this test to be able to execute")
        .isTrue();

    apiDocsEndpoint = apiDocsPath + endpointExtension;
    var response = get(TestAuthentication.REGULAR, requestUrl(), String.class);

    assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
    assertThat(response.getBody()).isNotNull();
    assertThatCode(() -> {
      var fileName = "%s.%s".formatted(LOCAL_FILE_NAME, fileExtension);
      try (var writer = new OutputStreamWriter(new FileOutputStream(fileName), StandardCharsets.UTF_8)) {
        writer.write(response.getBody());
      }
    }).doesNotThrowAnyException();
  }
}
